@page "/counter"

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

<button class="btn btn-primary" id="startButton">Record</button>

<script>
    const record = document.getElementById("startButton");
    let videoId = undefined;
    //const baseUrl = 'http://oluwashenor-001-site1.ftempurl.com/api/';
    const baseUrl = 'https://localhost:7095/api/';

    const blobToByteArray = (blob) => {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = function (event) {
                const arrayBuffer = event.target.result;
                const byteArray = new Uint8Array(arrayBuffer);
                resolve(byteArray);
            };
            reader.onerror = function (event) {
                reject(event.target.error);
            };
            reader.readAsArrayBuffer(blob);
        });
    };

    function createRecorder(stream, mimeType) {
        console.log("Starting Recorder");
        // the stream data is stored in this array
        let recordedChunks = [];

        const mediaRecorder = new MediaRecorder(stream);

        mediaRecorder.ondataavailable = function (e) {
            if (e.data.size > 0) {
                // console.log("Media,",e);
                // console.log("Media Data,", e);
                recordedChunks.push(e.data);
                saveStreamInBytes(e.data);
            }
        };
        mediaRecorder.onstop = function () {
            //saveFile(recordedChunks);
            recordedChunks = [];
            streamAPI("stop");
        };
        mediaRecorder.start(10000); // For every 200ms the stream data will be stored in a separate chunk.
        return mediaRecorder;
    }

    function saveStream(blobStream) {
        let streamString = "";
        let reader = new FileReader();
        reader.readAsDataURL(blobStream);
        reader.onloadend = function () {
            streamString = reader.result;
            console.log("Stream String In", streamString);
            const data = {
                chunkString: streamString,
                id: videoId
            };
            fetch(baseUrl + '/uploadStream', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json', // Specify content type as JSON
                    // Add any other headers as needed
                },
                body: JSON.stringify(data) // Convert data object to JSON string
            })
                .then(response => {
                    // Check if the request was successful
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    // Handle success response here
                    return response.json(); // Parse JSON response
                })
                .then(responseData => {
                    // Handle the response data
                    console.log('Upload successful:', responseData);
                })
                .catch(error => {
                    // Handle errors
                    console.error('There has been a problem with your fetch operation:', error);
                });
        }
    }

    
    function saveStreamInBytes(blob) {
        let blobData = new Blob([blob], { type: 'video/mp4' });
        let reader = new FileReader();
        reader.readAsArrayBuffer(blobData);
        reader.onloadend = function () {
            let arrayBuffer = reader.result;
            const byteArray = new Uint8Array(arrayBuffer);
            console.log(baseUrl + 'uploadStreamInBytes/' + videoId);
            fetch(baseUrl+'uploadStreamInBytes/' + videoId, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json', // Specify content type as JSON
                                     // Add any other headers as needed
                },
                body: byteArray // Convert data object to JSON string
            })
                .then(response => {
                    // Check if the request was successful
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    // Handle success response here
                    return response.json(); // Parse JSON response
                })
                .then(responseData => {
                    // Handle the response data
                    console.log('Upload successful:', responseData);
                })
                .catch(error => {
                    // Handle errors
                    console.error('There has been a problem with your fetch operation:', error);
                });
        
            
            }
    }




    function streamAPI(state) {
        let api = '';
        if (state == "start") {
            api = baseUrl + 'startStream';
        }
        else{
            api = baseUrl + 'stopStream/' + videoId;
        }
        console.log(api);
        fetch(api, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json', // Specify the content type if needed
                // Add any other headers as needed
            },
            // You can include credentials such as cookies in your request if necessary
            credentials: 'same-origin', // or 'include' to send credentials to other domains
        })
            .then(response => {
                // Check if the request was successful
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                // Parse the JSON response
                return response.json();
            })
            .then(data => {
                // Handle the data from the response
                console.log("Response Data from Start Stream API", data);
                videoId = data["data"];
            })
            .catch(error => {
                // Handle errors
                console.error('There has been a problem with your fetch operation:', error);
            });
    }
    
    // Function to handle button click
    function startRecording() {
        //Start Stream API
        streamAPI("start");
        navigator.mediaDevices.getDisplayMedia({ video: true,audio:true })
            .then(function (stream) {
                // Mime type for WebM video format
                const mimeType = 'video/mp4';

                // Create recorder with obtained stream and mimeType
                const mediaRecorder = createRecorder(stream, mimeType);

                // Change button text and functionality
                const startButton = document.getElementById("startButton");
                startButton.textContent = "Recording... Click to Stop";

                // Function to stop recording
                function stopRecording() {
                    mediaRecorder.stop();
                    startButton.textContent = "Start Recording";
                    startButton.onclick = startRecording;
                }

                // Attach click event to the button to stop recording
                startButton.onclick = stopRecording;
            })
            .catch(function (error) {
                console.error('Error accessing media devices:', error);
            });
    }

    record.onclick = startRecording();

</script>

@code {
    private int currentCount = 0;

    private void IncrementCount()
    {
        currentCount++;
    }
}
